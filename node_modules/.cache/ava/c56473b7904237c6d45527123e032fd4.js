'use strict';

const test = require('ava');
const { greet, isShouting, group, oxfordComma, normaliseNames } = require('./index');

test('Greeting', t => {
    const greeting = greet("Tom");
    t.is(greeting, "Hello, Tom.");
});

test('Greeting handles null', t => {
    const greeting = greet();
    t.is(greeting, "Hello, my friend.");
});

test('Greeting shouts back', t => {
    const greeting = greet("JERRY");
    t.is(greeting, "HELLO, JERRY!");
});

test('isShouting returns true if message was all caps', t => {
    const shouting = isShouting("ANGRY SHOUTING");
    t.is(shouting, true);
});

test('isShouting returns true if message was all caps', t => {
    const shouting = isShouting("quietness");
    t.is(shouting, false);
});

test('Greeting can handle 2 names', t => {
    const greeting = greet(['Tom', 'Helena']);
    t.is(greeting, "Hello, Tom and Helena.");
});

test('Greeting can handle multiple names', t => {
    const greeting = greet(['Small Cat', 'Fat Cat', 'Smelly Cat']);
    t.is(greeting, "Hello, Tom, Helena, and Pirastero.");
});

test('Greeting can parse weird strings', t => {
    const greeting = greet(["Pirastero", "Helena, Thomas"]);
    t.is(greeting, "Hello, Pirastero, Helena, and Thomas.");
});

test('Group splits array of 2 names into string delimited by and', t => {
    const names = group(["Test", "Test"]);
    t.is(names, "Test and Test");
});

test('Group splits array of 3 or mote names into string delimited by , and the last name by , and', t => {
    const names = group(["Test", "Test", "Test"]);
    t.is(names, "Test, Test, and Test");
});
test('Oxford Comma Decides how to present last name', t => {
    const x = oxfordComma(true, 'test', 'test');
    t.is(x, "test and test");
});
test('Oxford Comma Decides how to present last name', t => {
    const x = oxfordComma(false, 'test', 'test');
    t.is(x, "test, and test");
});
test('NormaliseNames parses names separated by , into one array', t => {
    const names = normaliseNames(["Small Cat", "Fat Cat, Smelly Cat"]);
    t.is(names.toString(), ["Small Cat", "Fat Cat", "Smelly Cat"].toString());
});

test('Greeting escapes " and then ignores the oxford comma', t => {
    const greeting = greet(["Bob", "\"Charlie, Dianne\""]);
    t.is(greeting, "Hello, Bob and Charlie, Dianne.");
});
//# sourceMappingURL=/Users/tankcorn/Projects/Greeting Kata/node_modules/.cache/ava/c56473b7904237c6d45527123e032fd4.js.map