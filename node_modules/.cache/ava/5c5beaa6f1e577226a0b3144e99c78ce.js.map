{"version":3,"sources":["greeting.test.js"],"names":["test","require","greet","isShouting","group","oxfordComma","normaliseNames","t","greeting","is","shouting","names","x","toString"],"mappings":"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","file":"greeting.test.js","sourcesContent":["const test = require('ava');\nconst {greet, isShouting, group, oxfordComma, normaliseNames} = require('./index');\n\n/**\n * Requirement 1\n * Write a method greet(name) that interpolates name in a simple greeting. \n * For example, when name is \"Bob\", \n * the method should return a string \"Hello, Bob.\".\n */\n\ntest('Greeting', t => {\n   const greeting = greet(\"Tom\");\n   t.is(greeting, \"Hello, Tom.\")\n});\n\n/**\n * Requirement 2\n * Handle nulls by introducing a stand-in. For example, when name is null, \n * then the method should return the string \"Hello, my friend.\"\n */\ntest('Greeting handles null', t => {\n    const greeting = greet();\n    t.is(greeting, \"Hello, my friend.\");\n});\n\n/**\n * Requirement 3\n * Handle shouting. When name is all uppercase, \n * then the method should shout back to the user. \n * For example, when name is \"JERRY\" \n * then the method should return the string \"HELLO JERRY!\"\n */\ntest('Greeting shouts back', t => {\n    const greeting = greet(\"JERRY\");\n    t.is(greeting, \"HELLO, JERRY!\")\n});\n\ntest('isShouting returns true if message was all caps', t => {\n    const shouting = isShouting(\"ANGRY SHOUTING\");\n    t.is(shouting, true)\n});\n\ntest('isShouting returns true if message was all caps', t => {\n    const shouting = isShouting(\"quietness\");\n    t.is(shouting, false);\n});\n\n/**\n * Requirement 4\n * Handle two names of input. When name is an array of two names \n * (or, in languages that support it, varargs or a splat), \n * then both names should be printed. For example, when name is [\"Jill\", \"Jane\"], \n * then the method should return the string \"Hello, Jill and Jane.\"\n */\ntest('Greeting can handle 2 names', t => {\n    const greeting = greet(['Jill', 'Jane']);\n    t.is(greeting, \"Hello, Jill and Jane.\");\n});\n\n/**\n * Requirement 5\n * Handle arbitrarily names of input. When name represents more than two names, \n * separate them with commas and close with an Oxford comma and \"and\". \n * For example, when name is [\"Amy\", \"Brian\", \"Charlotte\"], \n * then the method should return the string \n * \"Hello, Amy, Brian, and Charlotte.\"\n */\ntest('Greeting can handle multiple names', t => {\n    const greeting = greet(['Amy','Brian', 'Charlotte']);\n    t.is(greeting, \"Hello, Amy, Brian, and Charlotte.\");\n});\n\ntest('Greeting can parse weird strings', t => {\n    const greeting = greet([\"Small Cat\", \"Fast Cat, Smelly Cat\"]);\n    t.is(greeting, \"Hello, Small Cat, Fast Cat, and Smelly Cat.\")\n});\n\ntest('Group splits array of 2 names into string delimited by and', t => {\n    const names = group([\"Test\", \"Test\"]);\n    t.is(names, \"Test and Test\");\n});\n\ntest('Group splits array of 3 or mote names into string delimited by , and the last name by , and', t => {\n    const names = group([\"Test\", \"Test\", \"Test\"]);\n    t.is(names, \"Test, Test, and Test\")\n})\ntest('Oxford Comma Decides how to present last name', t => {\n    const x = oxfordComma(true, 'test', 'test')\n    t.is(x,\"test and test\");\n});\ntest('Oxford Comma Decides how to present last name', t => {\n    const x = oxfordComma(false, 'test', 'test')\n    t.is(x,\"test, and test\");\n})\ntest('NormaliseNames parses names separated by , into one array', t => {\n    const names = normaliseNames([\"Small Cat\", \"Fast Cat, Smelly Cat\"]);\n    t.is(names.toString(), [\"Small Cat\", \"Fast Cat\", \"Smelly Cat\"].toString())\n});\n\ntest('Greeting escapes \" and then ignores the oxford comma', t => {\n    const greeting = greet([\"Bob\", \"\\\"Charlie, Dianne\\\"\"])\n    t.is(greeting, \"Hello, Bob and Charlie, Dianne.\")\n})\n\n/**\n * Requirement 6\n * Allow mixing of normal and shouted names \n * by separating the response into two greetings. \n * For example, when name is [\"Amy\", \"BRIAN\", \"Charlotte\"], \n * then the method should return the string \n * \"Hello, Amy and Charlotte. AND HELLO BRIAN!\"\n */\n\ntest('Greeting can handle a mix of shouting and regular greetings', t => {\n    const greeting = greet([\"Amy\", \"Brian, Charlotte\"])\n    t.is(greeting, \"Hello, Amy and Charlotte. AND HELLO BRIAN!\")\n})"]}