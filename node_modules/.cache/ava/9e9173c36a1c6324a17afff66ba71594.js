'use strict';

const test = require('ava');
const { greet, isShouting, group, oxfordComma, normaliseNames } = require('./index');

/**
 * Requirement 1
 * Write a method greet(name) that interpolates name in a simple greeting. 
 * For example, when name is "Bob", 
 * the method should return a string "Hello, Bob.".
 */

test('Greeting', t => {
    const greeting = greet("Tom");
    t.is(greeting, "Hello, Tom.");
});

/**
 * Requirement 2
 * Handle nulls by introducing a stand-in. For example, when name is null, 
 * then the method should return the string "Hello, my friend."
 */
test('Greeting handles null', t => {
    const greeting = greet();
    t.is(greeting, "Hello, my friend.");
});

/**
 * Requirement 3
 * Handle shouting. When name is all uppercase, 
 * then the method should shout back to the user. 
 * For example, when name is "JERRY" 
 * then the method should return the string "HELLO JERRY!"
 */
test('Greeting shouts back', t => {
    const greeting = greet("JERRY");
    t.is(greeting, "HELLO, JERRY!");
});

test('isShouting returns true if message was all caps', t => {
    const shouting = isShouting("ANGRY SHOUTING");
    t.is(shouting, true);
});

test('isShouting returns true if message was all caps', t => {
    const shouting = isShouting("quietness");
    t.is(shouting, false);
});

/**
 * Handle two names of input. When name is an array of two names 
 * (or, in languages that support it, varargs or a splat), 
 * then both names should be printed. For example, when name is ["Jill", "Jane"], 
 * then the method should return the string "Hello, Jill and Jane."
 */
test('Greeting can handle 2 names', t => {
    const greeting = greet(['Jill', 'Jane']);
    t.is(greeting, "Hello, Jill and Jane.");
});

test('Greeting can handle multiple names', t => {
    const greeting = greet(['Small Cat', 'Fast Cat', 'Smelly Cat']);
    t.is(greeting, "Hello, Small Cat, Fast Cat, and Smelly Cat.");
});

test('Greeting can parse weird strings', t => {
    const greeting = greet(["Small Cat", "Fast Cat, Smelly Cat"]);
    t.is(greeting, "Hello, Small Cat, Fast Cat, and Smelly Cat.");
});

test('Group splits array of 2 names into string delimited by and', t => {
    const names = group(["Test", "Test"]);
    t.is(names, "Test and Test");
});

test('Group splits array of 3 or mote names into string delimited by , and the last name by , and', t => {
    const names = group(["Test", "Test", "Test"]);
    t.is(names, "Test, Test, and Test");
});
test('Oxford Comma Decides how to present last name', t => {
    const x = oxfordComma(true, 'test', 'test');
    t.is(x, "test and test");
});
test('Oxford Comma Decides how to present last name', t => {
    const x = oxfordComma(false, 'test', 'test');
    t.is(x, "test, and test");
});
test('NormaliseNames parses names separated by , into one array', t => {
    const names = normaliseNames(["Small Cat", "Fast Cat, Smelly Cat"]);
    t.is(names.toString(), ["Small Cat", "Fast Cat", "Smelly Cat"].toString());
});

test('Greeting escapes " and then ignores the oxford comma', t => {
    const greeting = greet(["Bob", "\"Charlie, Dianne\""]);
    t.is(greeting, "Hello, Bob and Charlie, Dianne.");
});
//# sourceMappingURL=/Users/tankcorn/Projects/Greeting Kata/node_modules/.cache/ava/9e9173c36a1c6324a17afff66ba71594.js.map