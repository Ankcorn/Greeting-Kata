{"version":3,"sources":["greeting.test.js"],"names":["test","require","greet","isShouting","group","oxfordComma","normaliseNames","t","greeting","is","shouting","names"],"mappings":";;AAAA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAM,EAACC,KAAD,EAAQC,UAAR,EAAoBC,KAApB,EAA2BC,WAA3B,EAAwCC,cAAxC,KAAyDL,QAAQ,UAAR,CAA/D;;AAEAD,KAAK,UAAL,EAAiBO,KAAK;AACnB,UAAMC,WAAWN,MAAM,KAAN,CAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,aAAf;AACF,CAHD;;AAKAR,KAAK,uBAAL,EAA8BO,KAAK;AAC/B,UAAMC,WAAWN,OAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,mBAAf;AACH,CAHD;;AAKAR,KAAK,sBAAL,EAA6BO,KAAK;AAC9B,UAAMC,WAAWN,MAAM,OAAN,CAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,eAAf;AACH,CAHD;;AAKAR,KAAK,iDAAL,EAAwDO,KAAK;AACzD,UAAMG,WAAWP,WAAW,gBAAX,CAAjB;AACAI,MAAEE,EAAF,CAAKC,QAAL,EAAe,IAAf;AACH,CAHD;;AAKAV,KAAK,iDAAL,EAAwDO,KAAK;AACzD,UAAMG,WAAWP,WAAW,WAAX,CAAjB;AACAI,MAAEE,EAAF,CAAKC,QAAL,EAAe,KAAf;AACH,CAHD;;AAKAV,KAAK,6BAAL,EAAoCO,KAAK;AACrC,UAAMC,WAAWN,MAAM,CAAC,KAAD,EAAQ,QAAR,CAAN,CAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,wBAAf;AACH,CAHD;;AAKAR,KAAK,oCAAL,EAA2CO,KAAK;AAC5C,UAAMC,WAAWN,MAAM,CAAC,KAAD,EAAO,QAAP,EAAiB,WAAjB,CAAN,CAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,oCAAf;AACH,CAHD;;AAKAR,KAAK,kCAAL,EAAyCO,KAAK;AAC1C,UAAMC,WAAWN,MAAM,CAAC,WAAD,EAAc,gBAAd,CAAN,CAAjB;AACAK,MAAEE,EAAF,CAAKD,QAAL,EAAe,sCAAf;AACH,CAHD;;AAKAR,KAAK,4DAAL,EAAmEO,KAAK;AACpE,UAAMI,QAAQP,MAAM,CAAC,MAAD,EAAS,MAAT,CAAN,CAAd;AACAG,MAAEE,EAAF,CAAKE,KAAL,EAAY,eAAZ;AACH,CAHD;;AAKAX,KAAK,6FAAL,EAAoGO,KAAK;AACrG,UAAMI,QAAQP,MAAM,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAAN,CAAd;AACAG,MAAEE,EAAF,CAAKE,KAAL,EAAY,sBAAZ;AACH,CAHD;AAIAX,KAAK,+CAAL,EAAsDO,KAAK,CAE1D,CAFD;AAGAP,KAAK,4DAAL,EAAmEO,KAAK;AACpE,UAAMI,QAAQL,eAAe,CAAC,WAAD,EAAc,gBAAd,CAAf,CAAd;AACAC,MAAEE,EAAF,CAAKE,KAAL,EAAY,CAAC,WAAD,EAAc,QAAd,EAAwB,QAAxB,CAAZ;AACH,CAHD","file":"greeting.test.js","sourcesContent":["const test = require('ava');\nconst {greet, isShouting, group, oxfordComma, normaliseNames}= require('../index');\n\ntest('Greeting', t => {\n   const greeting = greet(\"Tom\");\n   t.is(greeting, \"Hello, Tom.\")\n});\n\ntest('Greeting handles null', t => {\n    const greeting = greet();\n    t.is(greeting, \"Hello, my friend.\");\n});\n\ntest('Greeting shouts back', t => {\n    const greeting = greet(\"JERRY\");\n    t.is(greeting, \"HELLO, JERRY!\")\n});\n\ntest('isShouting returns true if message was all caps', t => {\n    const shouting = isShouting(\"ANGRY SHOUTING\");\n    t.is(shouting, true)\n});\n\ntest('isShouting returns true if message was all caps', t => {\n    const shouting = isShouting(\"quietness\");\n    t.is(shouting, false);\n});\n\ntest('Greeting can handle 2 names', t => {\n    const greeting = greet(['Tom', 'Helena']);\n    t.is(greeting, \"Hello, Tom and Helena.\");\n});\n\ntest('Greeting can handle multiple names', t => {\n    const greeting = greet(['Tom','Helena', 'Pirastero']);\n    t.is(greeting, \"Hello, Tom, Helena, and Pirastero.\");\n});\n\ntest('Greeting can parse weird strings', t => {\n    const greeting = greet([\"Pirastero\", \"Helena, Thomas\"]);\n    t.is(greeting, \"Hello, Pirastero, Helena, and Thomas\")\n});\n\ntest('Group splits array of 2 names into string delimited by and', t => {\n    const names = group([\"Test\", \"Test\"]);\n    t.is(names, \"Test and Test\");\n});\n\ntest('Group splits array of 3 or mote names into string delimited by , and the last name by , and', t => {\n    const names = group([\"Test\", \"Test\", \"Test\"]);\n    t.is(names, \"Test, Test, and Test\")\n})\ntest('Oxford Comma Decides how to present last name', t => {\n\n})\ntest('NormalisemNames parses names separated by , into one array', t => {\n    const names = normaliseNames([\"Pirastero\", \"Helena, Thomas\"]);\n    t.is(names, [\"Pirastero\", \"Helena\", \"Thomas\"])\n})"]}